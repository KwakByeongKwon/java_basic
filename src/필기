절차 지향 프로그래밍은 이름 그대로 절차를 지향한다. 실행 순서를 중요하게 생각하는 방식입니다.
프로그램의 흐름을 순차적으로 따르며 처리하는 방식입니다.
어떻게 를 중심으로


객체 지향 프로그래밍은 이름 그대로 객체를 지향합니다. 쉽게 이야기해서 객체를 중요하게 생각하는 방식입니다.
실제 세계의 사물이나 사건을 객체로 보고, 이러한 객체들 간의 상호작용을 중심으로 프로그래밍 하는 방식입니다.
무엇을 을 중심으로

절차 지향은 데이터와 해당 데이터에 대한 처리 방식이 분리되어 있습니다.
객체지향에서는 데이터와 그 데이터에 대한 행동이 하나의 객체 안에 함께 포함되어 있다.



패키지를 구성할때 관련 있는것끼리 묶어줘야됌.

접근 제어자의 종류
private : 모든 외부 호출을 막는다.
default(package-private) : 같은 패키지안에서 호출은 허용한다.
protected : 같은 패키지안에서 호출은 허용한다. 패키지가 달라도 상속 관계의 호출은 허용한다.
public : 모든 외부 호출을 허용한다.

하나의 자바 파일에는 하나의 public class 만 등장할 수 있습니다.
public class 는 파일명과 같아야함
default 접근 제어자를 사용하는 class 는 무한정 생성 가능함.


메서드 영역 : 클래스 정보를 보관한다. 이 클래스 정보가 붕어빵 틀이다
스택 영역 : 실제 프로그램이 실행되는 영역이다. 메서드를 실행할 때 마다 하나씩 쌓이다
힙 영역 : 객체(인스턴스)가 생성되는 영역이다. new 명령어를 사용하면 이 영역을 사용한다.
쉽게 이야기 해서 붕어빵 틀로부터 생성된 붕어빵들이 존재하는 공간입니다. 배열도 여기에 해당합니다


멤버 변수 : static 이 붙은 것과 아닌것에 따라 분류됌
인스턴스변수 : static이 붙지 않은 변수
    - 인스턴스 변수는 인스턴스를 만들 때 마다 새로 만들어짐

클래스 변수 : static이 붙은 변수
    - 클래스 변수, 정적 변수, 스태틱 변수 등으로 다양하게 불림
    - static이 붙은 멤버 변수는 인스턴스와 무관하게 클래스에 바로 접근해서 사용할 수 있고,
    클래스 자체에 소속되어 있음.
    - 클래스 변수는 자바 프로그램을 시작할 때 딱 1개가 만들어진다.
    - 인스턴스와는 다르게 보통 여러곳에서 공유하는 목적으로 사용됌


클래스 내부의 기능을 사용할 때, 정적 메서드는 static이 붙은 정적 메서나 정적 변수만 사용 가능합니다.
클래스 내부의 기능을 사용할 때, 정적 메서드는 인스턴스 변수나, 인스턴스 메서드를 사용할 수 없습니다.
반대로 모든 곳에서 static을 호출할 수 있습니다.


정적 메서드는 객체 생성이 필요 없이 메서드의 호출만으로 필요한 기능을 수핼할 때 주로 사용합니다.
간단한 메서드 하나로 끝나는 유틸리티성 메서드에서 자주 사용됌


기본 메서드는 main() 메서드임 이것 또한 정적 메서드임
그러므로 그 안에서 사용할때에도 static을 사용하여 추가적으로 메서드를 생성해 주었던 것임


자바에서 다중상속은 불가능하다.

메서드 오버로딩: 메서드 이름이 같고 매개변수(파라미터)가 다른 메서드를 여러개 정의하는 것을 메서드 오버로딩 이라고 합니다.
메서드 오버라이딩: 메서드 오버라이딩은 하위 클래스에서 상위 클래스를 재정의 하는 과정을 의미합니다.


protected : 같은 패키지안에서 호출은 허용한다.
패키지가 달라도 상속 관계의 호출은 허용한다.